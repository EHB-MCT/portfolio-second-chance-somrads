version: '3.2'

services:
  api:
    container_name: dev5-api
    env_file: # - .env
    build: ./images/api
    ports:
      - 80:3000
    volumes:
      - ./images/api/src:/usr/app/src
    environment:
      POSTGRES_CONNECTION_STRING: "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@store:5432/${POSTGRES_DATABASE}"
      TEST_POSTGRES_CONNECTION_STRING: "postgres://${TEST_POSTGRES_USER}:${TEST_POSTGRES_PASSWORD}@store-test:5432/${TEST_POSTGRES_DATABASE}"
      NODE_ENV: development
    depends_on:
      - store
      - store-test
    healthcheck:
      test: [ "CMD", "node", "--version" ]
      interval: 5s
      timeout: 5s
      retries: 5

  store:
    image: postgres:latest
    container_name: dev5-db
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DATABASE: ${POSTGRES_DATABASE}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d/
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U $POSTGRES_USER -d $POSTGRES_DATABASE"
        ]
      interval: 5s
      timeout: 5s
      retries: 5

  store-test:
    image: postgres:latest
    container_name: dev5-db-test
    ports:
      - 5433:5432
    environment:
      POSTGRES_USER: ${TEST_POSTGRES_USER}
      POSTGRES_PASSWORD: ${TEST_POSTGRES_PASSWORD}
      POSTGRES_DATABASE: ${TEST_POSTGRES_DATABASE}

    volumes:
      - pgdata-test:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d/
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U $TEST_POSTGRES_USER -d $TEST_POSTGRES_DATABASE"
        ]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  pgdata:
  pgdata-test:
